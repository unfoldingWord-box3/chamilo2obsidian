#!/bin/bash
########################################################################
#
# NAME  c2md - convert clickup cards to markdown
#
# DESCRIPTION several utilities to discover clickup card space.
#      See example for ultimate use. Contains 3 embedded constants

base='testDir'         # put the files wherever you want
trainingSpace=14796241 # location of training tasks
tok='pk_10656863_B6X69RPEDFD4GMN2MQLXMJ6CMRQ3MG4J' # bms clickup token. get your own

#
  USAGE="$0 [-h] [-c] <cmd>  
  Where:
   -c   - compressed to nl after complete record
   -h   - help text

    cmd is:
    w    - raw api query expects object
    j    - raw api query expects object and jq filter
    ls   - lists and their ids
    m    - get specific task
    mm   -
    mt   - get checklist items for a task
    org  - all task names with context in my space
    u    - get user for embedded token
    ui   - get users id
    ts   - get authorized teams
    ti   - get team id
    t    - get my team by id
    tsk  - get team tasks
    tsks - all teams tasks
    tp   - get specific team task props
    tsv  - output as tab separated values for spreadsheet
    tt   - 
    s    - spaces
    si   - space by id
    md <base> - create markdown files from redirected input
      Ex:
      ./c2md tp | ./c2md md ./todir"
# 
########################################################################

hdr=" -H Authorization:$tok -H Content-Type:application/json"
c=

if [ "x$1" = "x-h" ] ; then
  cat $0 | helper
  exit
fi

if [ "x$1" = "x-c" ] ; then
  c="-c"
  shift
fi

if [ $# -lt 1 ] ; then
  echo "Missing Argument"
  echo "USAGE: $USAGE"
  exit
fi

cmd=$1
apiVersion=2
pth=https://api.clickup.com/api/v$apiVersion
options='subtasks=yes\&include_closed=yes'
cHdr="curl -s $hdr $pth"
jq="jq $c"

case $cmd in
  w)   $cHdr/$2                        ;;
  j)   $cHdr/$2       | $jq $3         ;;
  m)   $cHdr/task/$2  | $jq '.'        ;;
  ls)  $cHdr/task/$2  | $jq '.list.id, .list.name' ;;
  u)   $cHdr/user     | $jq '.'        ;;
  ui)  $cHdr/user     | $jq '.user.id' ;;
  ts)  $cHdr/team     | $jq '.'        ;;
  ti)  $cHdr/team     | $jq '.teams[0].id' | sed -e 's/\"//g' ;;
  tsv) $0 tp          | mlr --ijson --otsv cat  ;;
  
  mm)
    $cHdr/task/$2  | \
    $jq '{ checkName:  .checklists[0].name, 
           listItem:   .checklists[].items[].name,                   
           checkName2: .checklists[1].name,
           checkName3: .checklists[2].name,
           subItem:    
           subSubItem: .checklists[].items[].children[].children[].name
    }' 
    ;;
    
  mt)  
    $cHdr/task/$2 > tmptask
    cat tmptask| \
    $jq '.checklists[].name' > tmpcheck
    count=0
    
    while read checklist ; do
      echo "------ $checklist ------"
      cat tmptask | $jq '.checklists['$count'].items[].name' > tmpitems
      cat tmpitems
      ((count++))  
    done < tmpcheck
    ;;
     
  md) # produce markdown for a task
    if [ $# -gt 1 ] ; then
      base="$2"
    fi

    while IFS=$':' read -r attr val ; do
      val="${val/ \"}"
      val="${val/\",}"
     
      case "$attr" in 
        *space*)     spce="$val"   ;;
        *listId*)    lid="$val"    ;;
        *list*)      list="$val"   ;;
        *project*)   proj="$val"   ;;
        *parent*)    dad="$val"    ;;
        *tid*)       tid="$val"    ;;
        *task*)      task="$val"   ;;
        *desc*)      desc="$val"   ;;
        *cont*)      desc1="$val"  ;;
        *status*)    stat="$val"   ;;
        *tmid*)      tmid="$val"   ;;
        *author*)    auth="$val"   ;;
        *owner*)     own="$val"    ;;
        *folder*)    fold="$val"   ;;
        *checkName*) item="$val"   ;;
        '}')
          echo "--- task $tid = $task"
          tofile='s/ /_/g;s/[\/:,&"><?}{]//g;s/\\//g;'
          
          if [ "x$oproj" != "x$proj" ] ; then
            prj=`echo $proj | sed -e "$tofile"`
            mkdir -p $base/$prj
          fi
          
          if [ "x$olid" != "x$lid" ] ; then
            lst=`echo $list | sed -e "$tofile"`
            mkdir -p $base/$prj/$lst
            outline="$base/$prj/$lst/outline.md"
            echo "# $proj
## $list" > "$outline"
          fi  

          if [ "x$otid" != "x$tid" ] ; then
            tsk="${task/http*}"
            tsk="${tsk:0:50}"
            fle=`echo $tsk | sed -e "$tofile"`
            mdf="${base}/${prj}/${lst}/${fle}.md"
            echo "- [[${task/http*}]]($mdf)" >> "$outline"  
            
            if [ "x$desc" = "x" ] ; then
              desc="$desc1"
            fi
            
            desc=`echo "$desc" | perl -p -e 's/\\\n/<br>/g'`
            desc=`echo "$desc" | sed -e 's/null,//g;'`
            aut=${auth/ /_}
            asn=${assn/ /_}
            echo " # [$proj]
## [[$list]]($outline)
### $task
$desc

#### ${auth:+Author: #}${aut}$${assn:+, &nbsp; Assigned: #}${asn}${stat:+, &nbsp; Status: }$stat
" > ${mdf}
          fi
          
          if [ "$item" != " null" ] ; then
            $0 tc $tid > tmplst
            checkCount=0
            listCount=0
            
            while IFS=$':' read attr val ; do
              case "x$attr" in
                *check*) 
                  check=`echo $val | sed -e 's/\"//g;s/,//;s/^ *//;s/ *$//;'`
                  
                  if [ "$check" = 'null' ] ; then
                    continue
                  fi
                  
                  if [ "x$ocheck" != "x$check" ] ; then
                    echo "### $check"
                    listCount=0
                  fi
                  
                  ocheck="$check"
                  ;;
                  
                *item*) 
                  if [ "x$check" = 'xChecklist' ] ; then
                    echo -n "- [ ] " 
                  else
                    echo -n "- "
                  fi
                  
                  echo "${val//\"}"
                  
                  $0 tt $tid $checkCount $listCount | while read child ; do 
                    echo "   - ${child//\"}"
                  done
                  
                  (( listCount++ ))
                  ;;
               
              esac
            done < tmplst >> $mdf
            
          fi

          oproj="$proj"
          otid="$id"
          olid="$lid"
      
          if [ "x$dad" != "x" -a "x$dad" != "x null," ] ; then
            echo -n "[$dad] " >> $mdf
          fi
          
          echo "[$tid]" >> $mdf
          ;;
          
          *) ;; # ignore this attribute
      esac
    done 
    ;;

  tc)
    $cHdr/task/$2  | \
    $jq '.checklists[] | { check: .name, item: .items[].name }'
    ;;
      
  tt)
    $cHdr/task/$2  | \
    $jq '.checklists['$3'] | .items['$4'].children[].name?'
    ;;
    
  *) teamId=`$0 ti`
    case $cmd in
      s)    ${cHdr}/team/$teamId/space | $jq '.spaces[] | { id: .id, space: .name }' ;;
      si)   ${cHdr}/space/$2 | $jq '.' ;;
      t)    ${cHdr}/team/$teamId  | $jq '.'                 ;;
      tsk)  ${cHdr}/team/$teamId/task  | $jq ".tasks[$2]"   ;;
      tsks) ${cHdr}/team/$teamId/task  | $jq ".tasks[]"     ;;
      tp|tt|tl|li|org) 
#        for i in {0..150} ; do
#          echo -n " page: $i " >&2

          case $cmd in
            tt)   ${cHdr}/team/$teamId/task?page=$i\&$options  | jq '.' ;;
            
            org)  
              # ${cHdr}/team/$teamId/task?page=$i\&space_ids%255B%255D=$trainingSpace\&$options  | \
              #     $jq '.tasks[] | {  
              #${cHdr}/team/$teamId/task?page=$i\&$options > tmp.tmp 
              #echo -n " ret: $?" >&2
              # grep HTTP tmp.res
              cat tmp.tsk | $jq '.tasks[] | select( .space.id == "'$trainingSpace'" ) | { 
                space:     .space.id,
                list:      .list.name,
                project:   .project.name,
                parent:    .parent,
                tid:       .id,
                task:      .name 
              } '
              ;;
                   
            tp) # flattened tasks
              #${cHdr}/team/$teamId/task?page=$i\&$options > tmp.tmp 
              #echo -n " ret: $?" >&2
              cat tmp.tsk | $jq '.tasks[] | select( .space.id == "'$trainingSpace'" ) | { 
                space:     .space.id,
                listId:    .list.id,
                list:      .list.name,
                project:   .project.name,
                parent:    .parent,
                tid:       .id,
                task:      .name, 
                desc:      .description, 
                desc1:      .text_content,
                status:    .status.status,    
                tmid:      .team_id,
                author:    .creator.username, 
                owner:     .assignees[0].username,
                folder:    .folder.name,
                checkName: .checklists[0].name
              }' 
              ;;

          esac
#        done
        ;;
        
      *)
        echo "Unknown command: $1"
        echo "USAGE $USAGE"
        exit
        ;;
  esac
  ;;
esac
